#!/bin/bash

if ! command -v aws &>/dev/null; then
    echo "Error: aws is not installed. Please install it first."
    exit 1
fi

# =============== Default values ===============
domain="$S3_DOMAIN"
bucket_name="$S3_BUCKET_NAME"
bucket_path="$S3_BUCKET_PATH"
remove_after_upload=false
exit_on_error=false

# =============== Functions ===============
show_help() {
    echo "Usage: $(basename "$0") [OPTIONS] [FILES or FOLDERS]"
    echo
    echo "This script uploads files or folders to an S3 bucket using AWS CLI."
    echo
    echo "Options:"
    echo "  -d, --domain          Specify the S3 domain (endpoint URL)."
    echo "  -n, --bucket-name     Specify the S3 bucket name."
    echo "  -p, --bucket-path     Specify the path within the bucket."
    echo "  --clean               Remove files/folders after successful upload."
    echo "  --exit-on-error       Exit immediately if any command fails."
    echo "  -h                    Display this help and exit."
    echo
    echo "Examples:"
    echo "  $0 -d https://s3.amazonaws.com -n my-bucket -p backups --clean --exit-on-error file1.txt folder2"
    echo
    exit 1
}

upload_file(){
  local endpoint_url="$1"
  local bucket_name="$2"
  local bucket_path="$3"
  local file_path="$4"
  
  aws --endpoint-url "$endpoint_url" s3 cp "$file_path" "s3://$bucket_name/$bucket_path/" --acl public-read
}

upload_folder(){
  local endpoint_url="$1"
  local bucket_name="$2"
  local bucket_path="$3"
  local folder_path="$4"
  
  aws --endpoint-url "$endpoint_url" s3 cp --recursive "$folder_path" "s3://$bucket_name/$bucket_path/" --acl public-read
}

# =============== Main ===============
# Parse arguments
while [[ "$#" -gt 1 ]]; do
    case "$1" in
        -d | --domain) domain="$2"; shift 2;;
        -n | --bucket-name) bucket_name="$2"; shift 2;;
        -p | --bucket-path) bucket_path="$2"; shift 2;;
        --clean) remove_after_upload=true; shift 1;;
        --exit-on-error) exit_on_error=true; shift 1;;
        -h) show_help;;
        *) echo "Unknown option: $1"; show_help;;
    esac
done

if [[ -z "$domain" || -z "$bucket_name" || -z "$bucket_path" || $# -eq 0 ]]; then
  show_help
fi

# Check if domain starts with http or https, if not prepend https://
if [[ ! "$domain" =~ ^http ]]; then
    domain="https://$domain"
fi

if [ "$exit_on_error" = true ]; then
  set -e
fi

for input in "$@"; do
  find . -name "$input" | while read item; do
    echo "Uploading $item..."
    if [ -f "$item" ]; then
      upload_file "$domain" "$bucket_name" "$bucket_path" "$item"
    elif [ -d "$item" ]; then
      upload_folder "$domain" "$bucket_name" "$bucket_path" "$item"
    else
      printf "The input '%s' is not valid. Please enter a valid file or folder.\n\n" "$item"
      continue 
    fi
    
    if [ $? -eq 0 ]; then
      if [ "$remove_after_upload" = true ]; then
        rm -rf "$item"
      fi
      
      printf "Done.\n\n"
    fi
  done
done